// Generated by view binder compiler. Do not edit!
package com.example.hospitals.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.hospitals.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityUpdateProductBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton btnAddProductAdminPanelUpdate;

  @NonNull
  public final ConstraintLayout conUpdate;

  @NonNull
  public final TextInputEditText edDescriptionProductUpdate;

  @NonNull
  public final TextInputEditText edIdProductUpdate;

  @NonNull
  public final TextInputEditText edImageProductUpdate;

  @NonNull
  public final TextInputEditText edNameProductUpdate;

  @NonNull
  public final TextInputEditText edPriceProductUpdate;

  @NonNull
  public final LinearLayout linearProgressAdminPanelUpdate;

  @NonNull
  public final TextView tvCurrentAdminUpdate;

  @NonNull
  public final TextInputLayout tvDescriptionProductUpdate;

  @NonNull
  public final TextInputLayout tvIdProductUpdate;

  @NonNull
  public final TextInputLayout tvImageProductUpdate;

  @NonNull
  public final TextInputLayout tvNameProductUpdate;

  @NonNull
  public final TextInputLayout tvPriceProductUpdate;

  private ActivityUpdateProductBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatButton btnAddProductAdminPanelUpdate, @NonNull ConstraintLayout conUpdate,
      @NonNull TextInputEditText edDescriptionProductUpdate,
      @NonNull TextInputEditText edIdProductUpdate, @NonNull TextInputEditText edImageProductUpdate,
      @NonNull TextInputEditText edNameProductUpdate,
      @NonNull TextInputEditText edPriceProductUpdate,
      @NonNull LinearLayout linearProgressAdminPanelUpdate, @NonNull TextView tvCurrentAdminUpdate,
      @NonNull TextInputLayout tvDescriptionProductUpdate,
      @NonNull TextInputLayout tvIdProductUpdate, @NonNull TextInputLayout tvImageProductUpdate,
      @NonNull TextInputLayout tvNameProductUpdate, @NonNull TextInputLayout tvPriceProductUpdate) {
    this.rootView = rootView;
    this.btnAddProductAdminPanelUpdate = btnAddProductAdminPanelUpdate;
    this.conUpdate = conUpdate;
    this.edDescriptionProductUpdate = edDescriptionProductUpdate;
    this.edIdProductUpdate = edIdProductUpdate;
    this.edImageProductUpdate = edImageProductUpdate;
    this.edNameProductUpdate = edNameProductUpdate;
    this.edPriceProductUpdate = edPriceProductUpdate;
    this.linearProgressAdminPanelUpdate = linearProgressAdminPanelUpdate;
    this.tvCurrentAdminUpdate = tvCurrentAdminUpdate;
    this.tvDescriptionProductUpdate = tvDescriptionProductUpdate;
    this.tvIdProductUpdate = tvIdProductUpdate;
    this.tvImageProductUpdate = tvImageProductUpdate;
    this.tvNameProductUpdate = tvNameProductUpdate;
    this.tvPriceProductUpdate = tvPriceProductUpdate;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityUpdateProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityUpdateProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_update_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityUpdateProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_add_product_admin_panel_update;
      AppCompatButton btnAddProductAdminPanelUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnAddProductAdminPanelUpdate == null) {
        break missingId;
      }

      ConstraintLayout conUpdate = (ConstraintLayout) rootView;

      id = R.id.ed_description_product_update;
      TextInputEditText edDescriptionProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (edDescriptionProductUpdate == null) {
        break missingId;
      }

      id = R.id.ed_id_product_update;
      TextInputEditText edIdProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (edIdProductUpdate == null) {
        break missingId;
      }

      id = R.id.ed_image_product_update;
      TextInputEditText edImageProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (edImageProductUpdate == null) {
        break missingId;
      }

      id = R.id.ed_name_product_update;
      TextInputEditText edNameProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (edNameProductUpdate == null) {
        break missingId;
      }

      id = R.id.ed_price_product_update;
      TextInputEditText edPriceProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (edPriceProductUpdate == null) {
        break missingId;
      }

      id = R.id.linear_progress_admin_panel_update;
      LinearLayout linearProgressAdminPanelUpdate = ViewBindings.findChildViewById(rootView, id);
      if (linearProgressAdminPanelUpdate == null) {
        break missingId;
      }

      id = R.id.tv_current_admin_update;
      TextView tvCurrentAdminUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentAdminUpdate == null) {
        break missingId;
      }

      id = R.id.tv_description_product_update;
      TextInputLayout tvDescriptionProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvDescriptionProductUpdate == null) {
        break missingId;
      }

      id = R.id.tv_id_product_update;
      TextInputLayout tvIdProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvIdProductUpdate == null) {
        break missingId;
      }

      id = R.id.tv_image_product_update;
      TextInputLayout tvImageProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvImageProductUpdate == null) {
        break missingId;
      }

      id = R.id.tv_name_product_update;
      TextInputLayout tvNameProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvNameProductUpdate == null) {
        break missingId;
      }

      id = R.id.tv_price_product_update;
      TextInputLayout tvPriceProductUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvPriceProductUpdate == null) {
        break missingId;
      }

      return new ActivityUpdateProductBinding((ConstraintLayout) rootView,
          btnAddProductAdminPanelUpdate, conUpdate, edDescriptionProductUpdate, edIdProductUpdate,
          edImageProductUpdate, edNameProductUpdate, edPriceProductUpdate,
          linearProgressAdminPanelUpdate, tvCurrentAdminUpdate, tvDescriptionProductUpdate,
          tvIdProductUpdate, tvImageProductUpdate, tvNameProductUpdate, tvPriceProductUpdate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
